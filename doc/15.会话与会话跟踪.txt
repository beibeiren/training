会话
	对某个web应用程序的一次整体访问过程
会话问题
	业务需要多次请求
		如购物车
	无连接的http协议是无状态的，不能保存每个客户端私有信息
	如何保存客户端私有信息
会话跟踪
	解决同一时刻不同客户端会话私有数据保存问题
会话跟踪技术
	Session重点
		session是服务器分配的保存客户端私有信息一块内存空间 
		session对于面向无连接无状态的http协议而言是实现有状态会话的有益补充
		sessionId是session的唯一标识是服务器分配的内存空间的首地址
		session存储在服务器端
		服务器通过sessionId将客户端与session数据对应起来
		session机制
			客户端向服务器发出首次请求时，服务器为此客户端产生session对象，并生成sessionId，应答时发挥到客户端，客户端保存此sessionId。
			当同一个客户端向服务器发出新的请求时，要将上次得到的sessionId一同发出，服务器检查用户的sessionId，根据他取得session对象。
		session默认失效时间30min
		session的生命周期
		客户端如何保存sessionId？
		得到session
			servlet中获得的方式
				request.getSession()
					false 有返回，无返回null
					true  有返回，无创建并返回
				request.getSession()
					与传true等价
			JSP通过内置对象session直接访问
		session常用方法
			getId()                                 String  获取当前sessionId
			isNew()                                 boolean 判断session是不是新创建的
			getCreationTime()						long	获得当前session创建的时间
			getLastAccessedTime()                   long    获得客户端最后一次请求的时间
			setMaxInactiveInterval(int interval)    void    设置session最大请求间隔时间
			getMaxInactiveInterval()                int     获得session最大请求间隔时间
			setAttribute(String key, Object value)  void    向session中存储对象 
			getAttribute(String key)                Object  从session中获取对应的对象
			removeAttribute(String key)				void    从session中删除对应的对象
			invalidate()                            void    强制session过期
		session过期
			访问的时间间隔过了最大过期时间
			调用session的invalidate方法
			web服务器停止运行
		ServletContext对象
			启动时创建，停止时消亡
			只有一份，单态类
			application对象的实例接口
				application实现计数器
			取得servletContext对象方法
				JSP内置对象
				Servlet
					super.getServletContext();
					servletConfig.getServletContext();

		Request，session，application比较

		比较			request			   session           aplication
		
		生命周期  每次请求产生一个     第一次访问时创建      程序启动
		         请求结束即消亡       三种消亡情况			  容器停止	
		
		作用范围  如果使用请求转发，   一次会话              整个应用程序
				 在多个Servlet       包括一次或多次请求     所有人可以访问
				 (JSP)组件中共享
				 但仅限本次请求
		
		案例比较  存储客户端请求数    存放客户端数据         计数器
	 			 据,服务器端设置
				 数据		 

    URL重写
    	浏览器禁用cookie时使用
    	URL重写方法
    		response.encodeRedirectURL();
			response.encodeURL();

	Session和Cookie比较		

		比较内容		 Session                 Cookie

		保存方式      数据内容保存在服务器端    数据内容保存在客户端
		
		安全性        数据比较安全             数据相对不安全
		
		生命周期      使用内存存放数据，当用    保存在客户端的内存或文件中，
					  户长时间未请求服务器或   可以指定cookie的生存周期
					  服务器重启，内容可能丢失

		资源占用		  占用服务器的内存		 每次请求时发送cookie内容，
											 占用宽带

		存放内如       可以存放各种数据类型数据
		